name: üîÑ Rebuild Autogenerated Files

on:
  push:
    paths:
      - 'accounts/**'
      - 'collections/**'
      - 'jettons/**'
      - 'requirements.txt'
      - 'generator.py'
      - 'readme.md.template'
      - '.github/workflows/rebuild-src.yml'
    branches: [ main, master ]
  pull_request:
    paths:
      - 'accounts/**'
      - 'collections/**'
      - 'jettons/**'
      - 'requirements.txt'
      - 'generator.py'
  workflow_dispatch:
    inputs:
      force-rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: 'false'
  schedule:
    - cron: '27 */3 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-changes:
    name: üîç Validate Changes
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if generator should run
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force-rebuild }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for actual changes in monitored paths
          changed_files=$(git diff --name-only HEAD^ HEAD -- ${PATH_FILTER} 2>/dev/null || true)
          if [ -n "$changed_files" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
        env:
          PATH_FILTER: accounts/ collections/ jettons/ requirements.txt generator.py readme.md.template .github/workflows/rebuild-src.yml

  run-aggregator:
    name: üèóÔ∏è Run Generator
    needs: validate-changes
    if: needs.validate-changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
          pip install black isort # Optional: for code formatting

      - name: Run generator with validation
        run: |
          set -e  # Exit on error
          echo "Running generator.py..."
          python -m py_compile generator.py  # Validate syntax first
          python generator.py --validate
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Verify generated files
        run: |
          # Check if files were actually generated
          if [ ! -f "README.md" ]; then
            echo "ERROR: README.md was not generated!"
            exit 1
          fi
          
          # Validate JSON files if they exist
          if ls accounts/*.json 1> /dev/null 2>&1; then
            for file in accounts/*.json; do
              python -m json.tool "$file" > /dev/null || exit 1
            done
          fi

      - name: Commit and push changes
        if: github.event_name != 'pull_request'
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true

          # Check for changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          # Create commit
          git add -A
          git commit -m "ü§ñ Auto-generated files [skip ci]" \
            -m "Triggered by: ${{ github.event_name }}" \
            -m "Workflow: ${{ github.workflow }}" \
            -m "Commit: ${{ github.sha }}"

          # Push changes
          git pull origin ${{ github.ref_name }}
          git push origin ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: ‚úÖ Notification
    needs: run-aggregator
    if: always() && needs.run-aggregator.result != 'skipped'
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        if: ${{ needs.run-aggregator.result == 'success' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'notifications.yml',
              ref: 'main'
            })

  handle-failure:
    name: üö® Error Handling
    if: failure() && needs.run-aggregator.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
              body: '‚ùå Automatic regeneration failed. Please check the workflow logs.'
            })
                        - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v3.4.2
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
          
